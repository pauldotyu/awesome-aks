apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tuning-pipeline
  namespace: ${NAMESPACE}
spec:
  entrypoint: tuning-pipeline
  ttlStrategy:
    secondsAfterCompletion: 43200 # Set TTL to 12 hours (12 hours * 3600 seconds/hour)
  templates:
    - name: tuning-pipeline
      steps:
        - - name: generate
            template: generate-version
        - - name: process
            template: process-dataset
            arguments:
              parameters:
                - name: version
                  value: "{{steps.generate.outputs.result}}"
        - - name: tune
            template: tune-model
            arguments:
              parameters:
                - name: version
                  value: "{{steps.generate.outputs.result}}"
                - name: dataset
                  value: "{{steps.process.outputs.result}}"
        - - name: watch
            template: watch-workspace
            arguments:
              parameters:
                - name: version
                  value: "{{steps.generate.outputs.result}}"
        - - name: replace
            template: replace-workspace
            arguments:
              parameters:
                - name: version
                  value: "{{steps.generate.outputs.result}}"
    - name: generate-version
      script:
        image: python:3.13.0-bullseye
        command: [python]
        source: |
          import time
          timestamp = int(time.time())
          print(timestamp)
    - name: process-dataset
      inputs:
        parameters:
          - name: version
      script:
        image: python:3.13.0-bullseye
        command: [sh, -c]
        source: |
          pip install pandas==2.2.3 pyarrow==18.1.0 requests==2.32.3 azure.storage.blob==12.24.0 > /dev/null
          python -c "
          import os
          import pandas as pd
          import requests
          from datetime import datetime, timedelta
          from azure.storage.blob import BlobServiceClient, BlobSasPermissions, generate_blob_sas

          # generate file name with version
          local_file_name = 'formatted-product-chats-{{inputs.parameters.version}}.parquet'
          
          # download data from product-service
          response = requests.get('http://product-service:3002/ai/tuning/dataset')
          df = pd.DataFrame(response.json())
          df.to_parquet(local_file_name)
          
          # upload data to Azure Blob Storage
          blob_service_client = BlobServiceClient.from_connection_string(os.getenv('AZURE_STORAGE_CONNECTION_STRING'))
          container_name = 'datasets'
          blob_client = blob_service_client.get_blob_client(container=container_name, blob=local_file_name)
          with open(local_file_name, 'rb') as data:
              blob_client.upload_blob(data)
          
          # generate SAS token
          container_client = blob_service_client.get_container_client(container_name)
          blob_client = container_client.get_blob_client(local_file_name)
          sas_token = generate_blob_sas(
              account_name=blob_service_client.account_name,
              container_name=container_client.container_name,
              blob_name=blob_client.blob_name,
              permission=BlobSasPermissions(read=True),
              expiry=datetime.utcnow() + timedelta(hours=1),
              account_key=os.getenv('AZURE_STORAGE_ACCOUNT_KEY')
          )

          # generate SAS URL
          sas_url = f'https://{blob_service_client.account_name}.blob.core.windows.net/{container_client.container_name}/{blob_client.blob_name}?{sas_token}'
          print(sas_url)
          "
        env:
          - name: AZURE_STORAGE_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: mystoragesecret
                key: connectionString
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: mystoragesecret
                key: accountKey
    - name: tune-model
      inputs:
        parameters:
          - name: version
          - name: dataset
      resource:
        action: create
        manifest: |
          apiVersion: kaito.sh/v1alpha1
          kind: Workspace
          metadata:
            name: workspace-phi-3-tuning-{{inputs.parameters.version}}
            namespace: ${NAMESPACE}
          resource:
            instanceType: Standard_NC24ads_A100_v4
            labelSelector:
              matchLabels:
                app: phi-3-tuning-{{inputs.parameters.version}}
          tuning:
            preset:
              name: phi-3-mini-128k-instruct
            method: qlora
            input:
              urls:
                - "{{inputs.parameters.dataset}}"
            output:
              image: "${REGISTRY}/${REPOSITORY}:{{inputs.parameters.version}}"
              imagePushSecret: myregistrysecret
    - name: watch-workspace
      inputs:
        parameters:
          - name: version
      script:
        image: bitnami/kubectl:1.30.6
        command: [sh, -c]
        source: |
          until kubectl get workspace -n ${NAMESPACE} workspace-phi-3-tuning-{{inputs.parameters.version}} -ojsonpath='{.status.conditions[?(@.type=="WorkspaceSucceeded")].status}' | grep -q 'True'; do
            echo "Waiting for workspace to succeed..."
            sleep 10
          done
    - name: replace-workspace
      inputs:
        parameters:
          - name: version
      script:
        image: bitnami/kubectl:1.30.6
        command: [sh, -c]
        source: |
          kubectl replace -n ${NAMESPACE} -f - <<EOF
          apiVersion: kaito.sh/v1alpha1
          kind: Workspace
          metadata:
            name: workspace-phi-3-mini
          resource:
            instanceType: Standard_NC6s_v3
            labelSelector:
              matchLabels:
                apps: phi-3
          inference:
            preset:
              name: phi-3-mini-128k-instruct
            adapters:
              - source:
                  name: products-adapter
                  image: ${REGISTRY}/${REPOSITORY}:{{inputs.parameters.version}}
                  imagePullSecrets:
                    - myregistrysecret
                strength: "1.0"
          EOF

